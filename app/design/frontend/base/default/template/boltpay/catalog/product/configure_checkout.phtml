<?php
/**
 * Bolt magento plugin
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 *
 * @category   Bolt
 * @package    Bolt_Boltpay
 * @copyright  Copyright (c) 2019 Bolt Financial, Inc (https://www.bolt.com)
 * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */

/* @var Bolt_Boltpay_Block_Catalog_Product_Boltpay $this */
?>
<?php if ($this->isEnabledProductPageCheckout() && $this->isSupportedProductType()): ?>
<script type="text/javascript">
var boltConfigPDP = {
    product: <?php echo $this->getProductJSON(); ?>,
    /**
     * Initializes BoltCheckout
     */
    init: function () {
        <?php echo $this->getCartDataJs(Bolt_Boltpay_Block_Checkout_Boltpay::CHECKOUT_TYPE_PRODUCT_PAGE); ?>
    },
    /**
     * Returns current quantity value
     * @returns {number}
     */
    getQty: function () {
        return Number(document.getElementById('qty').value);
    },
    /**
     * Returns price of the currently configured product
     * @returns {number}
     */
    getPrice: function () {
        var price = Number(this.product.price);
        //use tier price instead, if qty matches
        for (var i = 0; i < this.product.tier_prices.length; i++) {
            if (this.getQty() >= Number(this.product.tier_prices[i]['price_qty'])) {
                price = Number(this.product.tier_prices[i]['price']);
            }
        }
        switch (this.product.type_id) {
            case 'configurable':
                if (typeof optionsPrice.optionPrices.config !== 'undefined') {
                    //add configurable options prices
                    price += Number(optionsPrice.optionPrices.config.price);
                }
                break;
        }
        return price;
    },
    /**
     * Called by BoltCheckout check callback and will prevent Bolt popup from opening if false is returned
     * @returns {boolean}
     */
    validate: function () {
        if (this.product.stock.manage && (!this.product.stock.status || this.product.stock.qty < this.getQty())) {
            if ((typeof BoltPopup !== 'undefined')) {
                BoltPopup.setMessage('<?php echo $this->__("The requested quantity is not available."); ?>');
                BoltPopup.show();
            }
            return false;
        }
        return new Validation('product_addtocart_form').validate();
    },
    /**
     * Returns cart data provided to BoltConnect.configureProductCheckout
     * @returns {{total: number, items: ([{reference: number, quantity: number, price: number, name: string, options: string}]|[])}}
     */
    getCartData: function () {
        var price = this.getPrice();
        return {
            items: this.getQty() > 0 ? [
                {
                    reference: this.product.id,
                    name: this.product.name,
                    price: price,
                    quantity: this.getQty(),
                    options: $('product_addtocart_form').serialize(),
                },
            ] : [],
            total: this.getQty() * price,
        };
    },
};

document.addEventListener("DOMContentLoaded", function() {
    var processIntervalCounter = 0;
    /*
     * This Interval function prevents error or even the lack of a button.
     * It is similar an Interval functionality in boltpay/replace.phtml
     */
    var processIntervalProd = setInterval(
        function() {
            processIntervalCounter++;
            if (typeof BoltCheckout !== "undefined") {
                clearInterval(processIntervalProd);
                boltConfigPDP.init();
            }

            if (processIntervalCounter > 50) {
                clearInterval(processIntervalProd);
            }
        }, 50
    );

    document.getElementById('qty').addEventListener('input', boltConfigPDP.init.bind(boltConfigPDP));
    if (typeof spConfig !== 'undefined') {
        spConfig.configureSubscribe(boltConfigPDP.init.bind(boltConfigPDP));
    }
    if (typeof opConfig !== 'undefined') {
        opConfig.reloadPrice = function () {
            Product.Options.prototype.reloadPrice.apply(opConfig);
            boltConfigPDP.init();
        };
    }
});

</script>
<?php endif; ?>
