<?php
/**
 * Bolt magento plugin
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 *
 * @category   Bolt
 * @package    Bolt_Boltpay
 * @copyright  Copyright (c) 2019 Bolt Financial, Inc (https://www.bolt.com)
 * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */

/* @var Bolt_Boltpay_Block_Catalog_Product_Boltpay $this */
?>
<?php if ($this->isEnabledProductPageCheckout() && $this->isSupportedProductType()): ?>
<script type="text/javascript">
var boltConfigPDP = {
    product: <?php echo $this->getProductJSON(); ?>,
    customer: <?php echo $this->getCustomerJSON(); ?>,
    /**
     * Initializes BoltCheckout
     */
    init: function () {
        <?php echo $this->getCartDataJs(Bolt_Boltpay_Block_Checkout_Boltpay::CHECKOUT_TYPE_PRODUCT_PAGE); ?>
    },
    /**
     * Returns current quantity value
     * @returns {number}
     */
    getQty: function () {
        return Number(document.getElementById('qty').value);
    },
    /**
     * Returns price of the currently configured product
     * @returns {number}
     */
    getPrice: function () {
        var price = Number(this.product.price);
        //use tier price instead, if qty matches
        for (var i = 0; i < this.product.tier_prices.length; i++) {
            if (this.getQty() >= Number(this.product.tier_prices[i]['price_qty'])) {
                price = Number(this.product.tier_prices[i]['price']);
            }
        }
        //add custom options prices
        if (typeof optionsPrice !== 'undefined') {
            for (var key in optionsPrice.customPrices){
                if (optionsPrice.customPrices.hasOwnProperty(key) && typeof optionsPrice.customPrices[key].price !== 'undefined') {
                    price += Number(optionsPrice.customPrices[key].price);
                }
            }
        }
        switch (this.product.type_id) {
            case 'configurable':
                if (typeof optionsPrice.optionPrices.config !== 'undefined') {
                    //add configurable options prices
                    price += Number(optionsPrice.optionPrices.config.price);
                }
                break;
            case 'downloadable':
                if (typeof optionsPrice.optionPrices.downloadable !== 'undefined') {
                    //add downloadable options price
                    price += Number(optionsPrice.optionPrices.downloadable);
                }
                break;
            case 'bundle':
                if (typeof optionsPrice.optionPrices.bundle !== 'undefined') {
                    //override price with bundle price
                    price = optionsPrice.optionPrices.bundle;
                }
                break;
        }
        return price;
    },
    /**
     * Called by BoltCheckout check callback and will prevent Bolt popup from opening if false is returned
     * @returns {boolean}
     */
    validate: function () {
        var formValidation = new Validation('product_addtocart_form');
        try {
            if (this.product.type_id == 'downloadable' && !this.customer.is_logged_in) {
                throw '<?php echo $this->__(
                    'Please <a href="%s">login</a> in order to purchase this product',
                    $this->getCustomerLoginUrlWithReferrer()
                ); ?>';
            }
            if (this.product.stock.manage && (!this.product.stock.status || this.product.stock.qty < this.getQty())) {
                throw '<?php echo $this->__("The requested quantity is not available."); ?>';
            }
            //TODO: support file type custom options
            //currently not supported because it would require custom upload and expiration logic
            document.querySelectorAll("#product_addtocart_form input[type='file']").forEach(function(fileInput) {
                if (fileInput.value) {
                    var name = 'file-upload-not-supported-bolt';
                    var advice = Validation.getAdvice(name, fileInput);
                    if (advice == null) {
                        advice = Validation.createAdvice(name, fileInput, false, '<?php echo $this->__('Files not supported with Product Page BoltCheckout. Please add product to cart and then use Bolt from the cart page to checkout.'); ?>');
                    }
                    Validation.showAdvice(fileInput, advice, name);
                    fileInput.focus();
                    throw '<?php echo $this->__('Files not supported with Product Page BoltCheckout. Please add product to cart and then use Bolt from the cart page to checkout.'); ?>';
                }
            });
        } catch (e) {
            if (typeof BoltPopup !== 'undefined' && typeof e === 'string') {
                BoltPopup.setMessage(e);
                BoltPopup.show();
            }
            return false;
        }
        return formValidation.validate();
    },
    /**
     * Returns items data
     * @returns {[{reference: number, quantity: number, price: number, name: string, options: string}]|[]}}
     */
    getItemData: function () {
        if (this.product.type_id == 'grouped') {
            var items = [];
            for (var i in this.product.associated_products) {
                if (!this.product.associated_products.hasOwnProperty(i) || !this.product.associated_products[i]) {
                    continue;
                }
                var product = this.product.associated_products[i];
                var qty = Number(document.getElementById('super_group_' + product.id).value);
                if (qty > 0) {
                    items.push(
                        {
                            reference: product.id,
                            name: product.name,
                            price: product.price,
                            quantity: qty,
                            options: $('product_addtocart_form').serialize(),
                        }
                    );
                }
            }
            return items;
        }
        if (this.getQty() <= 0) {
            return [];
        }
        return [
            {
                reference: this.product.id,
                name: this.product.name,
                price: this.getPrice(),
                quantity: this.getQty(),
                options: $('product_addtocart_form').serialize(),
            },
        ];
    },
    /**
     * Returns cart data to be provided to BoltConnect.configureProductCheckout
     * @returns {{currency: string, items: ([{reference: number, quantity: number, price: number, name: string, options: string}]|[])}}
     */
    getCartData: function () {
        return {
            items: this.getItemData(),
            currency: '<?php echo Mage::app()->getStore()->getCurrentCurrencyCode(); ?>'
        };
    },
};

document.addEventListener("DOMContentLoaded", function() {
    var processIntervalCounter = 0;
    /*
     * This Interval function prevents error or even the lack of a button.
     * It is similar an Interval functionality in boltpay/replace.phtml
     */
    var processIntervalProd = setInterval(
        function() {
            processIntervalCounter++;
            if (typeof BoltCheckout !== "undefined") {
                clearInterval(processIntervalProd);
                boltConfigPDP.init();
            }

            if (processIntervalCounter > 50) {
                clearInterval(processIntervalProd);
            }
        }, 50
    );

    document.querySelectorAll(('input[name=qty], input[name*=super_group], input[name*=qty]')).forEach(function (input) {
        input.addEventListener('input', boltConfigPDP.init.bind(boltConfigPDP));
    });
    if (typeof spConfig !== 'undefined') {
        spConfig.configureSubscribe(boltConfigPDP.init.bind(boltConfigPDP));
    }
    if (typeof opConfig !== 'undefined') {
        opConfig.reloadPrice = function () {
            Product.Options.prototype.reloadPrice.apply(opConfig);
            boltConfigPDP.init();
        };
    }
    if (typeof dConfig !== 'undefined') {
        dConfig.reloadPrice = function () {
            Product.Downloadable.prototype.reloadPrice.apply(dConfig);
            boltConfigPDP.init();
        };
    }
    if (typeof bundle !== 'undefined') {
        bundle.reloadPrice = function () {
            Product.Bundle.prototype.reloadPrice.apply(bundle);
            boltConfigPDP.init();
        };
    }
});

</script>
<?php endif; ?>
